name: Sync Priority Field with Labels

on:
  issues:
    types: [labeled, unlabeled, opened, edited]
  pull_request:
    types: [labeled, unlabeled, opened, edited]

jobs:
  sync-priority:
    runs-on: ubuntu-latest
    steps:
      - name: Sync Priority Field
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issueNumber = context.payload.issue?.number || context.payload.pull_request?.number;
            
            if (!issueNumber) return;
            
            // Get the issue/PR details
            const { data: issue } = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber
            });
            
            // Define priority mapping - UPDATE THESE TO MATCH YOUR EXACT LABEL NAMES
            const priorityLabels = {
              'Highest': 'Highest',  // Change left side to your exact label name
              'High': 'High',        // Change left side to your exact label name
              'Medium': 'Medium',    // Change left side to your exact label name
              'Low': 'Low'           // Change left side to your exact label name
            };
            
            // Find the highest priority label
            let priority = null;
            const labelNames = issue.labels.map(label => label.name);
            console.log(`Issue #${issueNumber} labels:`, labelNames);
            
            for (const [label, priorityValue] of Object.entries(priorityLabels)) {
              if (labelNames.includes(label)) {
                priority = priorityValue;
                console.log(`Found priority label: ${label} -> ${priorityValue}`);
                break; // Takes the first match (highest priority)
              }
            }
            
            if (!priority) {
              console.log('No priority labels found');
              return;
            }
            
            // Get project items for this issue
            const query = `
              query($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                          title
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const result = await github.graphql(query, {
              owner,
              repo,
              issueNumber
            });
            
            console.log(`Found ${result.repository.issue.projectItems.nodes.length} project items for issue #${issueNumber}`);
            
            if (result.repository.issue.projectItems.nodes.length === 0) {
              console.log('Issue is not in any projects yet');
              return;
            }
            
            // Update priority field for each project item
            for (const projectItem of result.repository.issue.projectItems.nodes) {
              // Get project fields
              const fieldsQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const fieldsResult = await github.graphql(fieldsQuery, {
                projectId: projectItem.project.id
              });
              
              console.log(`Project: ${projectItem.project.title}`);
              console.log('Available fields:', fieldsResult.node.fields.nodes.map(f => f.name));
              
              // Find the Priority field (update this name to match your field)
              const priorityField = fieldsResult.node.fields.nodes.find(
                field => field.name === 'Priority' // Change this to match your exact field name
              );
              
              if (!priorityField) {
                console.log(`Priority field not found in project ${projectItem.project.title}`);
                continue;
              }
              
              console.log('Priority field options:', priorityField.options.map(opt => opt.name));
              
              if (priorityField && priority) {
                // Find the option ID for the priority value
                const option = priorityField.options.find(opt => opt.name === priority);
                
                if (option) {
                  // Update the field
                  const updateMutation = `
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: $value
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `;
                  
                  await github.graphql(updateMutation, {
                    projectId: projectItem.project.id,
                    itemId: projectItem.id,
                    fieldId: priorityField.id,
                    value: {
                      singleSelectOptionId: option.id
                    }
                  });
                  
                  console.log(`Updated priority to ${priority} for issue #${issueNumber} in project ${projectItem.project.title}`);
                }
              } else if (priorityField && !priority) {
                // Clear the priority field if no priority label exists
                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: $value
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;
                
                await github.graphql(updateMutation, {
                  projectId: projectItem.project.id,
                  itemId: projectItem.id,
                  fieldId: priorityField.id,
                  value: {
                    singleSelectOptionId: null
                  }
                });
                
                console.log(`Cleared priority for issue #${issueNumber} in project ${projectItem.project.title}`);
              }
            }
